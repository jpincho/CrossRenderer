project ( CrossRenderer )
cmake_minimum_required ( VERSION 3.1 )

set ( CMAKE_CXX_STANDARD 11 )
set ( CMAKE_CXX_STANDARD_REQUIRED ON )

set ( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/bin" )
set ( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/lib" )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/output/bin" )

list ( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../CMakeUtils )
list ( APPEND CMAKE_MODULE_PATH ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/cmake )

include ( LocalPackage )

set ( LOCAL_PACKAGE_ALLOW_SYSTEM TRUE )
set_local_package_install_location ( "${CMAKE_CURRENT_LIST_DIR}/../ThirdParty/${CMAKE_BUILD_TYPE}" )

list ( APPEND CROSS_RENDERER_NECESSARY_DEPENDENCIES glfw3 )
list ( APPEND CROSS_RENDERER_NECESSARY_DEPENDENCIES glm )

foreach ( DEPENDENCY ${CROSS_RENDERER_NECESSARY_DEPENDENCIES} )
    find_local_package ( ${DEPENDENCY}  )
    string ( TOUPPER ${DEPENDENCY} UPPERCASE_DEPENDENCY )
    if ( NOT ${UPPERCASE_DEPENDENCY}_FOUND )
        install_local_package ( ${DEPENDENCY} )
    endif()
endforeach()
install_local_packages()

# Dependencies installed, configuring CrossRenderer
include ( target_warning_options )
set ( CROSS_RENDERER_HOST_PLATFORM ${CMAKE_SYSTEM_NAME} )
set ( CROSS_RENDERER_TARGET_PLATFORM ${CMAKE_SYSTEM_NAME} )
string ( TOUPPER ${CROSS_RENDERER_HOST_PLATFORM} CROSS_RENDERER_UPPERCASE_HOST_PLATFORM )
string ( TOUPPER ${CROSS_RENDERER_TARGET_PLATFORM} CROSS_RENDERER_UPPERCASE_TARGET_PLATFORM )

if ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set ( CROSS_RENDERER_CPU_BITS 64 )
else()
    set ( CROSS_RENDERER_CPU_BITS 32 )
endif()
set ( CROSS_RENDERER_HOST_PLATFORM_${CROSS_RENDERER_UPPERCASE_HOST_PLATFORM} TRUE )
set ( CROSS_RENDERER_TARGET_PLATFORM_${CROSS_RENDERER_UPPERCASE_TARGET_PLATFORM} TRUE )
set ( CROSS_RENDERER_CPU_${CROSS_RENDERER_CPU_BITS} TRUE )
string ( TOUPPER ${CMAKE_CXX_COMPILER_ID} CROSS_RENDERER_UPPERCASE_COMPILER )
set ( CROSS_RENDERER_COMPILER_${CROSS_RENDERER_UPPERCASE_COMPILER} TRUE )

message ( STATUS "${PROJECT_NAME} - Build host ${CROSS_RENDERER_HOST_PLATFORM}")
message ( STATUS "${PROJECT_NAME} - Build target ${CROSS_RENDERER_TARGET_PLATFORM}")

# GLFW3
if ( GLFW3_FOUND )
    option ( CROSS_RENDERER_GLFW3_BACKEND_SUPPORT "Build GLFW3 window backend support" TRUE )
    if ( CROSS_RENDERER_GLFW3_BACKEND_SUPPORT )
        message ( STATUS "${PROJECT_NAME} - Building with GLFW3 backend support" )
        list ( APPEND CROSS_RENDERER_INCLUDE_DIRS ${GLFW3_INCLUDE_DIRS} )
        list ( APPEND CROSS_RENDERER_LIBRARIES ${GLFW3_LIBRARIES} )
        file ( GLOB CROSS_RENDERER_GLFW3_SOURCES "WindowManager/GLFW3/*" )
        list ( APPEND CROSS_RENDERER_SOURCE_FILES ${CROSS_RENDERER_GLFW3_SOURCES} )
        source_group ( "WindowManager/GLFW3" FILES ${CROSS_RENDERER_GLFW3_SOURCES} )
        if ( CROSS_RENDERER_TARGET_PLATFORM_WINDOWS )
            foreach ( WINDOWS_LIBRARY winmm imm32 version )
                find_library ( LIBRARY_LOCATION NAMES ${WINDOWS_LIBRARY} )
                list ( APPEND CROSS_RENDERER_LIBRARIES ${LIBRARY_LOCATION} )
            endforeach()
        endif()
    endif()
endif()

# OpenGL backend
set ( OpenGL_GL_PREFERENCE GLVND )
find_package ( OpenGL QUIET )
if ( OPENGL_FOUND )
    option ( CROSS_RENDERER_OPENGL_CORE_SUPPORT "Enable support for OpenGL Core" TRUE )
    if ( CROSS_RENDERER_OPENGL_CORE_SUPPORT )
        message ( STATUS "${PROJECT_NAME} - Building OpenGL core backend" )
        file ( GLOB CROSS_RENDERER_OPENGL_SOURCES "Renderer/OpenGL/*.cpp" "Renderer/OpenGL/*.hpp" )
        list ( APPEND CROSS_RENDERER_SOURCE_FILES ${CROSS_RENDERER_OPENGL_SOURCES} )
        source_group ( "OpenGL" FILES ${CROSS_RENDERER_OPENGL_SOURCES} )

        # GLAD core
        file ( GLOB_RECURSE GLAD_SOURCES "ExternalModules/glad_core/*")
        add_library ( GLAD ${GLAD_SOURCES} )
        target_include_directories ( GLAD PUBLIC ${CMAKE_CURRENT_LIST_DIR}/ExternalModules/glad_core/include )
        list ( APPEND CROSS_RENDERER_LIBRARIES GLAD )
        target_warning_options ( GLAD DISABLED )

        if ( CROSS_RENDERER_TARGET_PLATFORM_LINUX )
            foreach ( LINUX_LIBRARY dl )
                find_library ( LIBRARY_LOCATION NAMES ${LINUX_LIBRARY} )
                list ( APPEND CROSS_RENDERER_LIBRARIES ${LIBRARY_LOCATION} )
            endforeach()
        endif()
    endif()
endif()

# Main library
configure_file ( CrossRendererConfig.hpp.in CrossRendererConfig.hpp )
file ( GLOB SOURCES "*.cpp" "*.hpp" "Renderer/*.cpp" "Renderer/*.hpp" "WindowManager/*.cpp" "WindowManager/*.hpp" "Internal/*" CrossRendererConfig.hpp.in AstyleConfig.astylerc )
list ( APPEND CROSS_RENDERER_SOURCE_FILES ${SOURCES} )
add_library ( CrossRenderer ${CROSS_RENDERER_SOURCE_FILES} )
target_include_directories ( CrossRenderer PUBLIC ${CROSS_RENDERER_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR} ${GLM_INCLUDE_DIRS} ExternalModules )
target_link_libraries ( CrossRenderer PUBLIC ${CROSS_RENDERER_LIBRARIES} )
target_warning_options ( CrossRenderer HIGH AS_ERRORS )

# Just to check if i have a parent
get_directory_property ( HAS_PARENT PARENT_DIRECTORY )
if ( HAS_PARENT )
    set ( DEFAULT_BUILD_TEST FALSE )
else()
    set ( DEFAULT_BUILD_TEST TRUE )
endif()

option ( CROSS_RENDERER_BUILD_TESTS "Build test apps" ${DEFAULT_BUILD_TEST} )

if ( CROSS_RENDERER_BUILD_TESTS )
    message ( STATUS "Building tests" )
    file ( GLOB TEST_SOURCES "Testbed/Test-TexturedQuad/*" "Testbed/TestBase.*" )
    add_executable ( Test-TexturedQuad ${TEST_SOURCES} )
    target_link_libraries ( Test-TexturedQuad CrossRenderer )
    target_warning_options ( Test-TexturedQuad HIGH AS_ERRORS )
    target_include_directories ( Test-TexturedQuad PRIVATE ${CMAKE_CURRENT_LIST_DIR}/ExternalModules )
    target_compile_definitions ( Test-TexturedQuad PRIVATE TESTBED_DATA_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Data/" TEST_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Test-TexturedQuad/" )

    file ( GLOB TEST_SOURCES "Testbed/Test-SpinningCube/*" "Testbed/TestBase.*" )
    add_executable ( Test-SpinningCube ${TEST_SOURCES} )
    target_link_libraries ( Test-SpinningCube CrossRenderer )
    target_warning_options ( Test-SpinningCube HIGH AS_ERRORS )
    target_include_directories ( Test-SpinningCube PRIVATE ${CMAKE_CURRENT_LIST_DIR}/ExternalModules )
    target_compile_definitions ( Test-SpinningCube PRIVATE TESTBED_DATA_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Data/" TEST_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Test-SpinningCube/" )

    file ( GLOB TEST_SOURCES "Testbed/Test-Skybox/*" "Testbed/TestBase.*" )
    add_executable ( Test-Skybox ${TEST_SOURCES} )
    target_link_libraries ( Test-Skybox CrossRenderer )
    target_warning_options ( Test-Skybox HIGH AS_ERRORS )
    target_include_directories ( Test-Skybox PRIVATE ${CMAKE_CURRENT_LIST_DIR}/ExternalModules )
    target_compile_definitions ( Test-Skybox PRIVATE TESTBED_DATA_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Data/" TEST_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Test-Skybox/" )

    file ( GLOB TEST_SOURCES "Testbed/Test-ImGui/*" "Testbed/TestBase.*" "ExternalModules/imgui/*" )
    add_executable ( Test-ImGui ${TEST_SOURCES} )
    target_link_libraries ( Test-ImGui CrossRenderer )
    target_warning_options ( Test-ImGui HIGH AS_ERRORS )
    target_include_directories ( Test-ImGui PRIVATE ${CMAKE_CURRENT_LIST_DIR}/ExternalModules )
    target_compile_definitions ( Test-ImGui PRIVATE TESTBED_DATA_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Data/" TEST_PATH="${CMAKE_CURRENT_LIST_DIR}/Testbed/Test-ImGui/" )
endif()

