include(CMakeParseArguments)
function ( target_warning_options target )
    if (( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" ) OR ( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX ))
        set ( DISABLED_WARNINGS_STRING "-W" )
        set ( DEFAULT_WARNINGS_STRING "" )
        set ( HIGH_WARNINGS_STRING "-Wall;-Wextra;-pedantic;-Wno-implicit-fallthrough;-Wno-old-style-cast" )
        set ( AS_ERRORS_STRING "-Werror" )
    elseif ( MSVC )
        set ( DISABLED_WARNINGS_STRING "/W0" )
        set ( DEFAULT_WARNINGS_STRING "" )
        set ( HIGH_WARNINGS_STRING "/W4" )
        set ( AS_ERRORS_STRING "/WX" )
    endif()
    cmake_parse_arguments ( PARSE_ARGV 0 "WARNING_OPTION" "DISABLED;DEFAULT;HIGH;AS_ERRORS" "" "" )
    if ( WARNING_OPTION_DISABLED )
#	message ( STATUS "Setting ${target} warning level to DISABLED" )
        target_compile_options( ${target} PRIVATE ${DISABLED_WARNINGS_STRING} )
    endif()
    if ( WARNING_OPTION_DEFAULT )
#	message ( STATUS "Setting ${target} warning level to DEFAULT" )
        target_compile_options( ${target} PRIVATE ${DEFAULT_WARNINGS_STRING} )
    endif()
    if ( WARNING_OPTION_HIGH )
#	message ( STATUS "Setting ${target} warning level to HIGH" )
        target_compile_options( ${target} PRIVATE ${HIGH_WARNINGS_STRING} )
    endif()
    if ( WARNING_OPTION_AS_ERRORS )
#	message ( STATUS "Setting ${target} warning level to AS_ERRORS" )
        target_compile_options( ${target} PRIVATE ${AS_ERRORS_STRING} )
    endif()
endfunction()
